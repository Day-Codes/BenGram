"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CoffeeTrack_1, UnresolvedTrack_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnresolvedTrack = exports.CoffeeTrack = void 0;
const constructs_1 = require("../utils/decorators/constructs");
let CoffeeTrack = CoffeeTrack_1 = class CoffeeTrack {
    constructor(track, requester) {
        this.base64 = track.track;
        this.requester = requester;
        this.build(track.info);
    }
    /** Check if obj is a valid Track */
    static isTrack(obj) {
        return typeof obj === "object" && obj ? obj instanceof CoffeeTrack_1 : false;
    }
    /** Display thumbnail url if source is youtube */
    displayThumbnail(size = "default") {
        if (this.source !== "youtube")
            return;
        return `https://img.youtube.com/vi/${this.identifier}/${size}.jpg`;
    }
    /** Build TrackInfo into ITrack */
    build(info) {
        this.title = info.title;
        this.identifier = info.identifier;
        this.author = info.author;
        this.duration = info.length;
        this.isSeekable = info.isSeekable;
        this.isStream = info.isStream;
        this.url = info.uri;
        this.source = info.sourceName;
    }
};
CoffeeTrack = CoffeeTrack_1 = __decorate([
    constructs_1.constructTrack()
], CoffeeTrack);
exports.CoffeeTrack = CoffeeTrack;
let UnresolvedTrack = UnresolvedTrack_1 = class UnresolvedTrack {
    constructor(
    /** Supposely the title of the track */
    title, 
    /** Supposably the author of the track */
    author, 
    /** Supposably the duration of the track */
    duration, 
    /** The requester of the track if any */
    requester) {
        this.title = title;
        this.author = author;
        this.duration = duration;
        this.requester = requester;
    }
    static isUnresolved(obj) {
        return typeof obj === "object" && obj ? obj instanceof UnresolvedTrack_1 : false;
    }
};
UnresolvedTrack = UnresolvedTrack_1 = __decorate([
    constructs_1.constructUnresolved()
], UnresolvedTrack);
exports.UnresolvedTrack = UnresolvedTrack;
