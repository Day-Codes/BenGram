"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const youtube_sr_1 = __importDefault(require("youtube-sr"));
const searchForATrack_1 = __importDefault(require("../functions/fetches/searchForATrack"));
const time_1 = __importDefault(require("@myno_21/time"));
const msToStringfyDate_1 = __importDefault(require("../utilities/msToStringfyDate"));
const getSpotifyTrack_1 = __importDefault(require("../functions/fetches/getSpotifyTrack"));
async function getPlaylist(uri, member) {
    if (uri.match("youtube.com/playlist?") ||
        uri.match("youtube.com/playlist?")) {
        let arr;
        const _definedArray = [];
        const response = await youtube_sr_1.default.getPlaylist(uri);
        for (const track of response) {
            let _search = await (0, searchForATrack_1.default)(track.title);
            _definedArray.push({
                author: track.channel?.name,
                durationSeconds: track.duration,
                spotifyDuration: (0, msToStringfyDate_1.default)(_search.duration_ms),
                spotifyThumbnail: _search.album?.images?.[0].url,
                spotifyTitle: _search.name,
                spotifyURL: _search.uri,
                trackAddedOn: `${time_1.default.getCurrentFormattedTime()}`,
                user: member,
                youtubeDuration: track.durationFormatted,
                youtubeThumbnail: track.thumbnail?.url,
                youtubeTitle: track.title,
                youtubeURL: track.url,
            });
            arr = {
                list: {
                    owner: `${response.channel?.name}`,
                    name: `${response.title}`,
                    imageURI: response.thumbnail?.url,
                    source: "Youtube",
                },
                tracks: _definedArray,
            };
        }
        return arr;
        // response.videos.map(async (video) => {
        //   const spot = await searchForATrack(video.title);
        //   _definedArray.push({
        //     author: video.channel?.name,
        //     durationSeconds: video.duration,
        //     spotifyDuration:
        //       millisecondsToDuration(spot.duration_ms!) ||
        //       "Error fetching duration.",
        //     spotifyThumbnail:
        //       spot.album?.images?.[0].url || "No thumbnails found.",
        //     spotifyTitle: spot.name || "No title found.",
        //     spotifyURL: spot.uri || "No uri found.",
        //     trackAddedOn: `${time?.getCurrentFormattedTime()}`,
        //     user: member,
        //     youtubeDuration: video.durationFormatted,
        //     youtubeThumbnail: video.thumbnail?.url,
        //     youtubeTitle: video.title,
        //     youtubeURL: video.url,
        //   });
        //   arr = {
        //     list: {
        //       imageURI: response.thumbnail?.url,
        //       owner: `${response.channel?.name}`,
        //       name: response.title,
        //       source: "Youtube",
        //     },
        //     track: _definedArray,
        //   };
        // });
        // console.log(
        //   "There is a delay of 13 seconds here this is a default message."
        // );
        // wait(13000);
        // console.log(arr!);
    }
    else if (uri.match("open.spotify.com/playlist/") ||
        uri.match("open.spotify.com/playlist")) {
        let arr;
        const response = await (0, getSpotifyTrack_1.default)(`${uri}`);
        const _definedArray = [];
        for (const tracks of response.tracks?.items) {
            const youtubeVideo = await youtube_sr_1.default.search(`${tracks.track?.album?.artists?.[0].name} ${tracks?.track?.name}`, {
                type: "video",
                limit: 1,
            });
            const youtubeResponse = await youtubeVideo[0];
            _definedArray.push({
                author: youtubeResponse.channel?.name,
                durationSeconds: youtubeResponse.duration,
                spotifyDuration: (0, msToStringfyDate_1.default)(tracks.track?.duration_ms),
                spotifyThumbnail: tracks.track?.album?.images?.[0].url,
                spotifyTitle: tracks.track?.name,
                spotifyURL: tracks.track?.external_urls?.spotify,
                trackAddedOn: `${time_1.default.getCurrentFormattedTime()}`,
                user: member,
                youtubeDuration: youtubeResponse.durationFormatted,
                youtubeThumbnail: youtubeResponse.thumbnail?.url,
                youtubeTitle: youtubeResponse.title,
                youtubeURL: youtubeResponse.url,
            });
        }
        return (arr = {
            list: {
                imageURI: response.images?.[0].url,
                name: response.name,
                owner: `${response.owner?.display_name}`,
                source: "Spotify",
            },
            tracks: _definedArray,
        });
        // response.tracks?.items?.map(async (item, index) => {
        //   const youtubeResponse = youtubeVideo[0];
        //   _definedArray?.push({
        //     author: youtubeResponse.channel?.name,
        //     durationSeconds: youtubeResponse.duration,
        //     spotifyDuration: millisecondsToDuration(item.track?.duration_ms!),
        //     spotifyThumbnail: item.track?.album?.images?.[0].url,
        //     spotifyTitle: item.track?.name,
        //     spotifyURL: item.track?.external_urls?.spotify,
        //     trackAddedOn: `${time.getCurrentFormattedTime()}`,
        //     user: member,
        //     youtubeDuration: youtubeResponse.durationFormatted,
        //     youtubeThumbnail: youtubeResponse.thumbnail?.url,
        //     youtubeTitle: youtubeResponse.title,
        //     youtubeURL: youtubeResponse.url,
        //   });
        //   arr = {
        //     list: {
        //       imageURI: response.images?.[0].url,
        //       name: response.name,
        //       owner: `${response.owner?.display_name}`,
        //       source: "Spotify",
        //     },
        //     track: _definedArray,
        //   };
        // });
        // console.log(
        //   "There is a delay of 13 seconds here this is a default message."
        // );
        // wait(13000);
        console.log(arr);
    }
    else {
        throw Error("You can only play Spotify/Youtube playlists.");
    }
}
function wait(ms) {
    var start = new Date().getTime();
    var end = start;
    while (end < start + ms) {
        end = new Date().getTime();
    }
}
exports.default = getPlaylist;
