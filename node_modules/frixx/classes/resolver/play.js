"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const isAUri_1 = __importDefault(require("../../utilities/isAUri"));
const detectUri_1 = __importDefault(require("../../detectors/detectUri"));
const youtube_sr_1 = __importDefault(require("youtube-sr"));
const getTrackResponse_1 = __importDefault(require("../../functions/fetches/getTrackResponse"));
const msToStringfyDate_1 = __importDefault(require("../../utilities/msToStringfyDate"));
const moment_1 = __importDefault(require("moment"));
const fetches_1 = __importDefault(require("../../functions/fetches"));
/**
 * @param args The specified query.
 */
async function playResolver(args) {
    if (!args || !args.length)
        throw new Error(`No query provided`);
    const isUri = (0, isAUri_1.default)(args);
    if (isUri === true) {
        const source = await (0, detectUri_1.default)(args);
        if (source === "Invalid Source.")
            throw new Error(`Not a valid uri/url\nBy the moment you are seeing this error message, that means the package doesn't supports the following uri as the source to play some music\nRequested URI: ${args}`);
        else if (source === "youtube") {
            const video = await youtube_sr_1.default.getVideo(args);
            if (video.live === true)
                return new EvalError(`Can't stream a live video from YouTube. You can't just play a live stream.`);
            const returnSource = {
                description: `${video.description}`,
                authorName: `${video.channel?.name}`,
                duration: `${video.duration}`,
                formattedDuration: `${video?.durationFormatted}`,
                id: `${video.id}`,
                thumbnail: `${video.thumbnail?.url}`,
                title: `${video.title}`,
            };
            return returnSource;
        }
        else {
            const spotifyResults = await (0, getTrackResponse_1.default)(args);
            const finalSpotSource = {
                name: spotifyResults.title,
                artist: {
                    name: spotifyResults.artists?.[0].name,
                    spotifyProfileURI: spotifyResults.artists?.[0].uri,
                },
                cleanDuration: (0, msToStringfyDate_1.default)(spotifyResults.duration),
                duration: `${spotifyResults.duration}`,
                preview: spotifyResults.audioPreview?.url,
                releaseDate: (0, moment_1.default)(spotifyResults.releaseDate?.isoString).format("dddd, MMMM Do YYYY"),
                thumbnail: spotifyResults.coverArt?.sources?.[0].url,
                spotifyURI: spotifyResults.uri,
            };
            return finalSpotSource;
        }
    }
    else {
        const r3quest = await (0, fetches_1.default)(`${args}` || args);
        const _response = {
            artist: {
                name: r3quest?.album?.artists[0].name,
                spotifyProfileURI: r3quest?.album?.artists[0]?.uri,
            },
            cleanDuration: (0, msToStringfyDate_1.default)(r3quest.duration_ms),
            duration: `${r3quest.duration_ms}`,
            name: r3quest.name,
            preview: r3quest.preview_url,
            releaseDate: (0, moment_1.default)(r3quest.album?.release_date).format("dddd, MMMM Do YYYY"),
            spotifyURI: r3quest.uri,
            thumbnail: r3quest.album?.images?.[0].url,
        };
        return _response;
    }
}
exports.default = playResolver;
