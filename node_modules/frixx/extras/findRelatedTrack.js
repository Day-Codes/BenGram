"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const play_dl_1 = __importDefault(require("play-dl"));
const searchForATrack_1 = __importDefault(require("../functions/fetches/searchForATrack"));
const msToStringfyDate_1 = __importDefault(require("../utilities/msToStringfyDate"));
const time_1 = __importDefault(require("@myno_21/time"));
const youtube_sr_1 = __importDefault(require("youtube-sr"));
exports.default = async (uri, member) => {
    if (!uri)
        throw Error(`No youtube uri/url provided`);
    const relatedVideo = await (await play_dl_1.default.video_basic_info(uri)).related_videos[0];
    const youtubeResponse = await youtube_sr_1.default.getVideo(relatedVideo);
    const spotifyResponse = await (0, searchForATrack_1.default)(`${youtubeResponse.title}`);
    const finalLook = {
        author: spotifyResponse.album?.artists[0].name || youtubeResponse.channel?.name,
        spotifyDuration: (0, msToStringfyDate_1.default)(spotifyResponse.duration_ms) || "Duration Error",
        spotifyThumbnail: spotifyResponse.album?.images[0]?.url || "No spotify image found.",
        spotifyTitle: spotifyResponse.name ||
            youtubeResponse.title ||
            "Error fetching spotify title and the youtube title. RangeError.",
        spotifyURL: spotifyResponse.uri || "No spotify url",
        youtubeDuration: youtubeResponse.durationFormatted,
        youtubeThumbnail: youtubeResponse.thumbnail?.url,
        youtubeTitle: youtubeResponse.title,
        youtubeURL: youtubeResponse.url,
        user: member,
        trackAddedOn: `${time_1.default.getCurrentFormattedTime()}`,
        durationSeconds: youtubeResponse.duration,
    };
    return finalLook;
};
