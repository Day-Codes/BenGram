"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoffeeRoutePlanner = void 0;
const validators_1 = require("../utils/decorators/validators");
class CoffeeRoutePlanner {
    constructor(node) {
        this.node = node;
    }
    /** Get the routePlanner status */
    async status() {
        const res = await this.node.request("/routeplanner/status");
        return res.class ? res : undefined;
    }
    /** Unmark a failed address */
    // eslint-disable-next-line @typescript-eslint/member-ordering
    async freeAddress(address) {
        const res = await this.node.post("/routeplanner/free/address", { address }, true);
        return res.statusCode === 204;
    }
    /** Unmark all failed address */
    async freeAllAddress() {
        const res = await this.node.post("/routeplanner/free/all", undefined, true);
        return res.statusCode === 204;
    }
}
__decorate([
    validators_1.check((method, address) => {
        if (typeof address !== "string" || !address)
            throw new TypeError("Parameter 'address' must be present and be a non-empty string");
        return method(address);
    })
], CoffeeRoutePlanner.prototype, "freeAddress", null);
exports.CoffeeRoutePlanner = CoffeeRoutePlanner;
